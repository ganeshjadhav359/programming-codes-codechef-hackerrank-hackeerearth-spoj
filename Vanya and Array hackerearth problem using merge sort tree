#include<bits/stdc++.h>
using namespace std;
vector<int> v[4000000];
int a[1000007];
void mergesorttree(int s,int e ,int pos)
{
	if(s==e)
		v[pos].push_back(a[s]);
	else
	{
		int mid=(s+e)>>1;
		mergesorttree(s,mid,2*pos+1);
		mergesorttree(mid+1,e,2*pos+2);
		merge(v[2*pos+1].begin(),v[2*pos+1].end(),v[2*pos+2].begin(),v[2*pos+2].end(),back_inserter(v[pos]));
		//cout<<pos<<" "<<v[pos].size()<<endl;
		//for(int i=0;i<v[pos].size();i++)
		//	cout<<v[pos][i]<<" ";
		//cout<<endl;
			
	}	
}
int query(int s,int e,int pos,int l,int r,int val)
{
	if(l<=s && e<=r)
	{
		return v[pos].size()-(upper_bound(v[pos].begin(),v[pos].end(),val)-v[pos].begin());
	}
	else if( l>e || r<s)
		return 0;
	else
	{
		int mid=(s+e)>>1;
		int m=query(s,mid,2*pos+1,l,r,val);
		int n=query(mid+1,e,2*pos+2,l,r,val);
		return m+n;
	}	
}
int main()
{
	int n,k ,b[1000008];
	cin>>n>>k;
	//pair<int ,int> p[1000007];
	for(int i=0;i<n;i++)
		cin>>a[i];
	
	mergesorttree(0,n-1,0);
	for(int i=0;i<n;i++)
	{
		b[i]=query(0,n-1,0,i,n-1,a[i]);
		//p[i]=make_pair(l,i);
	}
	sort(b,b+n,greater<int>());
	long long  cnt=0;
	long long  h=n-1;	
	for(int i=0;i<n;i++)
	{
		long long  l=i;
		
		while(l<h)
		{
			if((b[l]+b[h])>=k)
			{
				cnt+=(h-l);
				break;
			}	
			else
				h--;	
		}
	}
	cout<<cnt<<endl;
return 0;		
}

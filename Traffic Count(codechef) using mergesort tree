#include<bits/stdc++.h>
using namespace std;
vector<int> v[4*100000];
vector<int> pre[4*100000];
int a[100007];
void merge(int pos)
{
	int l=v[2*pos+1].size();
	int r=v[2*pos+2].size();
	int m=0,n=0;
	int p=2*pos;
	int cnt=0;
	while(m<l && n<r)
	{
		if(v[p+1][m]==v[p+2][n])
		{
			v[pos].push_back(v[p+1][m]);
			if(m!=0)
				cnt+=(pre[p+1][m]-pre[p+1][m-1]);
			else
				cnt+=pre[p+1][m];
			if(n!=0)
				cnt+=(pre[p+2][n]-pre[p+2][n-1]);
			else
			 	cnt+=pre[p+2][n];	
			pre[pos].push_back(cnt);
			n++;
			m++;
		}
		else if(v[p+1][m]<v[p+2][n])
		{
			v[pos].push_back(v[p+1][m]);
			if(m!=0)
				cnt+=(pre[p+1][m]-pre[p+1][m-1]);
			else
				cnt+=pre[p+1][m];
			pre[pos].push_back(cnt);
			
			m++;
			
		}
		else
		{
			v[pos].push_back(v[p+2][n]);
			if(n!=0)
				cnt+=(pre[p+2][n]-pre[p+2][n-1]);
			else
			 	cnt+=pre[p+2][n];
			pre[pos].push_back(cnt);
			n++;
			
		}
	}
	
	while(n<r)
	{
		v[pos].push_back(v[p+2][n]);
		if(n!=0)
				cnt+=(pre[p+2][n]-pre[p+2][n-1]);
		else
			 	cnt+=pre[p+2][n];
		pre[pos].push_back(cnt);
		n++;
	}
	while(m<l)
	{
		v[pos].push_back(v[p+1][m]);
		if(m!=0)
			cnt+=(pre[p+1][m]-pre[p+1][m-1]);
		else
				cnt+=pre[p+1][m];
		pre[pos].push_back(cnt);
			
		m++;
	}
}
void mergesorttree(int s,int e,int pos)
{
	if(s==e)
	{
		v[pos].push_back(a[s]);
		pre[pos].push_back(1);
	}
	else
	{
		int mid=(s+e)/2;
		mergesorttree(s,mid,pos*2+1);
		mergesorttree(mid+1,e,pos*2+2);
		merge(pos);
		/*for(int i=0;i<v[pos].size();i++)
			cout<<v[pos][i]<<" ";
		cout<<endl;
		for(int i=0;i<pre[pos].size();i++)
			cout<<pre[pos][i]<<" ";
			cout<<endl;*/	
	}
}
int query(int s,int e,int pos,int l,int r,int t1,int t2)
{
	if(s>=l && e<=r)
	{
		int low=lower_bound(v[pos].begin(),v[pos].end(),t1)-v[pos].begin();
		if(v[pos].size()==low)
			return 0;
		int high=upper_bound(v[pos].begin(),v[pos].end(),t2)-v[pos].begin();	
		if(low==0)
			return (pre[pos][high-1]);
		else
			return (pre[pos][high-1]-pre[pos][low-1]);	
				
	}
	if(l>e || r<s)
		return 0;
	else
	{
		int mid=(s+e)/2;
		int m=query(s,mid,2*pos+1,l,r,t1,t2);
		int n=query(mid+1,e,2*pos+2,l,r,t1,t2);
		return m+n;
	}	
}
int main()
{
	int t;
	cin>>t;
	int m=1;
	while(t--)
	{
		
		int n;
		cin>>n;
		for(int i=0;i<n;i++)
			cin>>a[i];
		mergesorttree(0,n-1,0);
		int q;
		cin>>q;
		cout<<"Case "<<m<<":"<<endl;
		for(int i=0;i<q;i++)
		{
			int l,r,t1,t2;
			cin>>l>>r>>t1>>t2;
			int ans=query(0,n-1,0,l,r,t1,t2);
			cout<<ans<<endl;
		}
		for(int i=0;i<400000;i++)
		{
			v[i].clear();
			pre[i].clear();
		}
		m++;
			
	}
return 0;	
}

#include<bits/stdc++.h>
using namespace std;

struct temp
{
	long long  left;
	long long right;
};
temp st[400000];
int a[100005],n;
long long  tree(int s,int e,int pos)
{
	if(s==e)
	{
		st[pos].left=a[s];
		st[pos].right=0;
		return a[s];
	}
	else 
	{
		int mid=(s+e)>>1;
		long long m=tree(s,mid,pos*2+1);
		long long n=tree(mid+1,e,pos*2+2);
		st[pos].right=n;
		st[pos].left=m;
		return m+n;
	}
}
long long update(int s,int e,int x,long long val,int pos)
{
	if(s==e)
	{
		st[pos].left=val;
		return val;
	}
	else
	{
		int mid=(s+e)>>1;
		
		if(x<=mid)
		{
			long long m=update(s,mid,x,val,pos*2+1);
			st[pos].left=m;
			return m+st[pos].right;
		}
		else
		{
			long long n=update(mid+1,e,x,val,pos*2+2);
			st[pos].right=n;
			return n+st[pos].left;
		}
	}
}

int query(int s,int e,int pos, long long val,long long sum)
{
	if(s==e && st[pos].left+st[pos].right+sum!=val)
		return 0;
		
	else if(st[pos].left+st[pos].right+sum==val)
		return 1;
	else 
	{
		int mid=(s+e)>>1;
		int n=0,m=0;
		if((st[pos].left+sum)>=val)
		{
			n=query(s,mid,2*pos+1,val,sum);
		}
		else
		{
			sum+=st[pos].left;
			m=query(mid+1,e,2*pos+2,val,sum);
		}
		return m || n;
	}	
	
		
}

int main()
{
	cin>>n;
	for(int i=n-1;i>=0;i--)
		cin>>a[i];
	tree(0,n-1,0);
	int q;
	cin>>q;
	for(int i=0;i<q;i++)
	{
		long long z,t,k,x;
		cin>>t;
		if(t==1)
		{
			cin>>x>>k;
			update(0,n-1,n-x,k,0);
		}
		else
		{
			cin>>z;
			if(query(0,n-1,0,z,0))
				cout<<"YES"<<endl;
			else
				cout<<"NO"<<endl;	
		}	
	}	
	return 0;
}
